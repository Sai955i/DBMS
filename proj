[1:24 PM, 5/8/2023] Avinash Bhavancheekar: CREATE TABLE Product(
	prodid char(10),
	pname varchar(30),
	price decimal);
alter table product 
	add constraint pk_product 
	primary key(prodid);
alter table product 
	add constraint ck_price 
	check(price>0);

insert into product(prodid,pname,price) 
	values('p1','tape',2.5),('p2','tv',250),('p3','vcr',80);


create table Depot(
	depid char(10),
	addr varchar(25),
	volume int);
alter table depot add constraint pk_depot primary key(depid);
alter table depot add constraint ck_depot_volume check(volume>0);

insert into depot(depid,addr,volume) 
	values('d1','New York',9000),('d2','Syracuse',6000),('d4','New York',2000);


create table Stock(
	prodid char(10),
	depid char(10),
	quantity float);
alter table Stock 
	add constraint pk_stock primary key(prodid,depid);
alter table stock 
	add constraint fk_prodid foreign key(prodid) 
	references Product(prodid) ON DELETE CASCADE ON UPDATE CASCADE;
alter table stock 
	add constraint fk_depid foreign key(depid) 
	references Depot(depid) ON DELETE CASCADE ON UPDATE CASCADE;

alter table stock add constraint ck_quantity check(quantity<>0);

insert into stock(prodid,depid,quantity) 
	values('p1','d1',1000),('p1','d2',-100),('p1','d4',1200),('p3','d1',3000),('p3','d4',2000),('p2','d4',1500),('p2','d1',-400),('p2','d2',2000);


select * from Stock;

select * from Depot;
[1:25 PM, 5/8/2023] Avinash Bhavancheekar: import psycopg2
from tabulate import tabulate

con = psycopg2.connect(
    host="localhost",
    database="DBMS_PROJECT_CS623",
    user="postgres",
    password="0000")

print(con)

#For isolation: SERIALIZABLE
con.set_isolation_level(3)
#For atomicity
con.autocommit = False

try:
    cur = con.cursor()
    cur.execute("UPDATE Depot SET depid = 'dd1' WHERE depid = 'd1'")

except (Exception, psycopg2.DatabaseError) as err:
    print(err)
    print("Transactions could not be completed so database will be rolled back before start of transactions")
    con.rollback()
finally:
    if con:
        con.commit()
        cur.close
        con.close
        print("PostgreSQL connection is now closed")


try:
    cur = con.cursor()
    cur.execute("DELETE  FROM depot WHERE depid = 'dd1'")
    

except (Exception, psycopg2.DatabaseError) as err:
    print(err)
    print("Transactions could not be completed so database will be rolled back before start of transactions")
    con.rollback()
finally:
    if con:
        con.commit()
        cur.close
        con.close
        print("PostgreSQL connection is now closed")


try:
    cur = con.cursor()
    cur.execute("INSERT INTO depot (depid, addr, volume) VALUES ('d100','Chicago', 100)")
    cur.execute("INSERT INTO stock (prodid, depid, quantity) VALUES ('p1', 'd100', 100)")

    
except (Exception, psycopg2.DatabaseError) as err:
    print(err)
    print("Transactions could not be completed so database will be rolled back before start of transactions")
    con.rollback()
finally:
    if con:
        con.commit()
        cur.close
        con.close
        print("PostgreSQL connection is now closed")
